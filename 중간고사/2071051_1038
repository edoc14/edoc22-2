import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.LinkedList;

public class BOJ_1038 {

	public static int N;
	public static LinkedList<Long> arr;
	public static void backtracking(long num, int depth) { //num은 현재까지 만든 수, depth는 현재까지 만든 숫자의 길이
		if(depth > 10) //9876543210의 길이는 10이므로 이보다 길게 나올 수 없음
			return ;
		arr.add(num); //현재까지 만든 수 arr에 저장하기
		for (int i=0; i < num % 10; i++)  //끝에 한 숫자 더 붙이기. 이때 num의 끝자리 수와 비교하기! 걔보다 작은 수를 넣어야함.
			backtracking(num*10 + i, depth + 1);  //끝에 숫자 붙여주고, depth 늘려서 backtracking
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		//N번째 감소하는 수가 없다는 말이 뭔 뜻이지 -> 감소하는 수의 가장 큰 수는 9876543210 이다. 9876543210이 K번째라고하면 N이 K보다 크면 -1을 반환해야함
		arr = new LinkedList<>();
		for(int i=0; i < 10; i++) {
			backtracking(i, 0); //0 ~ 9로 시작하는 수
		}
		Collections.sort(arr); //우리가 만든 감소하는 수들이 정렬되어있지 않음. ~번째를 찾기 위해 정렬해주기
		int max = arr.size() - 1; //9876543210은 몇번째인가? -> (현재 arr에 들어있는 원소 개수 - 1 )번째
		if (max < N) //max번째보다 크면 N번째 감소하는 수가 없음!!
			System.out.println(-1);
		else
			System.out.println(arr.get(N));  //N번째 감소하는 수 반환
	}

}
