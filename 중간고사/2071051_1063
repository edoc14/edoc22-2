import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1063 {

	private static boolean isValid(char x, char y) {
		if (x >= 'A' && x <= 'H' && y >= '1' && y <= '8')
			return true;
		return false;
	}
	
	private static boolean isSame(char king[], char stone[]) {
		if (king[0] == stone[0] && king[1] == stone[1]) {
			return true;
		}
		return false;
	}
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		char king[] = new char[2];
		char stone[] = new char[2];
		
		String ktemp = st.nextToken();
		king[0] = ktemp.charAt(0);
		king[1] = ktemp.charAt(1);
		
		String stemp = st.nextToken();
		stone[0] = stemp.charAt(0);
		stone[1] = stemp.charAt(1);
		int N = Integer.parseInt(st.nextToken());
		
		for(int i=0;i<N;i++) {
			String move = br.readLine();
			if (move.equals("R")) {
				king[0]++;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[0]++;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[0]--; //원상복구
						king[0]--; //원상복구
					}
				}
				else if (isValid(king[0], king[1])==false) //king이 위치할 수 없는 경우
					king[0]--; //원상복구
			}
			else if (move.equals("L")) {
				king[0]--;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[0]--;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[0]++; //원상복구
						king[0]++; //원상복구
					}
				}
				else if (isValid(king[0], king[1])==false) //king이 위치할 수 없는 경우
					king[0]++; //원상복구
			}
			else if (move.equals("B")) {
				king[1]--;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[1]--;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[1]++; //원상복구
						king[1]++; //원상복구
					}
				}
				else if (isValid(king[0], king[1])==false) //king이 위치할 수 없는 경우
					king[1]++; //원상복구
			}
			else if (move.equals("T")) {
				king[1]++;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[1]++;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[1]--; //원상복구
						king[1]--; //원상복구
					}
				}
				else if (isValid(king[0], king[1])==false) //king이 위치할 수 없는 경우
					king[1]--; //원상복구
			}
			else if (move.equals("RT")) {
				king[0]++;
				king[1]++;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[0]++;
					stone[1]++;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[0]--;
						stone[1]--; //원상복구
						king[0]--; //원상복구
						king[1]--;
					}
				}
				else if (isValid(king[0], king[1])==false) { //king이 위치할 수 없는 경우
					king[0]--; //원상복구
					king[1]--;
				}
			}
			else if (move.equals("LT")) {
				king[0]--;
				king[1]++;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[0]--;
					stone[1]++;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[0]++;
						stone[1]--; //원상복구
						king[0]++; //원상복구
						king[1]--;
					}
				}
				else if (isValid(king[0], king[1])==false) { //king이 위치할 수 없는 경우
					king[0]++; //원상복구
					king[1]--;
				}
			}
			else if (move.equals("RB")) {
				king[0]++;
				king[1]--;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[0]++;
					stone[1]--;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[0]--;
						stone[1]++; //원상복구
						king[0]--; //원상복구
						king[1]++;
						
					}
				}
				else if (isValid(king[0], king[1])==false) { //king이 위치할 수 없는 경우
					king[0]--; //원상복구
					king[1]++;
				}
			}
			else if (move.equals("LB")) {
				king[0]--;
				king[1]--;
				if(isSame(king, stone)){ //king을 움직였는데 stone과 위치가 같은 경우
					stone[0]--;
					stone[1]--;
					if(isValid(stone[0], stone[1]) == false) { //stone이 위치할 수 없는 경우
						stone[0]++;
						stone[1]++; 
						king[0]++; 
						king[1]++;
					}
				}
				else if (isValid(king[0], king[1])==false) { //king이 위치할 수 없는 경우
					king[0]++; //원상복구
					king[1]++;
				}
			}
		}
		System.out.print(king[0]);
		System.out.println(king[1]);
		System.out.print(stone[0]);
		System.out.println(stone[1]);
	}
	
}
